import sys,subprocess,re,os
from datetime import datetime

root_path               = "/root/code/"
codeqlJavaFilesPath     = "/root/tools/codeql/java/ql/examples/snippets/"
codeqlJSFilesPath       = "/root/tools/codeql/javascript/ql/examples/"
codeqlcppFilesPath      = "/root/tools/codeql/cpp/ql/examples/snippets/"
trivyFilesPath          = "/root/tools/trivy_0.41.0/"
mavenDir                = "/root/tools/apache-maven-3.9.2/"
mavenSettingsFile       = "/root/tools/apache-maven-3.9.2/settings.xml"
mavenLocalRepositoryDir = "/root/tools/apache-maven-3.9.2/repository"
delombokJarFilePath     = "/root/tools/lombok.jar"
codeqlBinPath           = "/root/tools/codeql-cli-bin/codeql"
javaHome                = "/root/tools/jdk1.8.0_361/bin/java"
# javaEnvSetting          = "export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home;export PATH=$JAVA_HOME/bin:$PATH" #如果默认环境变量已经设置好，直接设置echo 1即可
# javaEnvSetting          = "echo 1"
###################################工具集###################################
def getCurrentTime():
    now = datetime.now() # 获取当前时间
    format = "%Y-%m-%d" # 定义格式字符串
    time_str = now.strftime(format) # 格式化时间字符串
    return time_str

def getCodeRespName(string):
    pattern = r"/([a-zA-Z-_0-9]+)\.git" # 定义正则表达式模式
    match = re.search(pattern, string) # 使用search方法查找匹配
    if match: # 如果找到匹配
        return match.group().replace(".git","").replace("/","")
    else: # 如果没有找到匹配
        pass


inputParameter1 = str(sys.argv[1])
inputParameter2 = str(sys.argv[2])

finalCMD                        = ""
projectRootPath                 = str(root_path) + str(getCodeRespName(inputParameter1))
replaceFileContenCmd            = "find . -maxdepth 1 -type f -name '*.txt' -exec sed -i '' 's#path##g' {} \;".replace("path",root_path)
DependencyCheckOutputName       = str(getCurrentTime())+"_"+str(getCodeRespName(inputParameter1))+"_DependencyCheck扫描结果.html"
DependencyCheckCmd              = "sudo dependency-check.sh --project 'myproject' -s  scanPath   -n  --out outPutname".replace("myproject",getCodeRespName(inputParameter1)).replace("outPutname",DependencyCheckOutputName).replace("scanPath",projectRootPath)+";"
gitCloneCmd                     =  "cd " + str(root_path) + ";"+ inputParameter1 +";"
###################################工具集###################################
if inputParameter2 == "java":
    lombokCommands          = ['javaHome -jar delombokJarFilePath delombok -n --onlyChanged . -d "delombok"'.replace("javaHome",javaHome).replace("delombokJarFilePath",delombokJarFilePath),'find "delombok" -name \'*.java\' -exec sed \'/Generated by delombok/d\' -i \'{}\' \';\'','find "delombok" -name \'*.java\' -exec sed \'/import lombok/d\' -i \'{}\' \';\'','cp -r "delombok/." "./"','rm -rf "delombok"']
    lombokCommands          = " ; ".join(lombokCommands)
    cmd                     = inputParameter1 # 获取第一个参数
    codeqlOutName           = str(getCurrentTime())+"_"+str(getCodeRespName(cmd))+"_codeql扫描结果.txt"
    cdToRootCmd             = "cd " + str(root_path) + str(getCodeRespName(cmd)) + ";"
    lombokCmd               = cdToRootCmd   +   lombokCommands   + ";"
    codeqlCreateCmd         = "javaEnvSetting  ;codeqlBinPath database create codeqldatabase --language=java --command='mavenDir/bin/mvn    -gs mavenSettingsFile  clean install   -Dmaven.test.skip -Dmaven.repo.local=mavenLocalRepositoryDir' --overwrite".replace("mavenSettingsFile",mavenSettingsFile).replace("mavenLocalRepositoryDir",mavenLocalRepositoryDir).replace("codeqlBinPath",codeqlBinPath).replace("mavenDir",mavenDir)+";"
    codeqlScanCmd           = "for file in codeqlJavaFilesPath*.ql; do sudo codeqlBinPath query run --database=codeqldatabase \"$file\">>codeqlOutName; done".replace("codeqlOutName",codeqlOutName).replace("codeqlJavaFilesPath",codeqlJavaFilesPath).replace("codeqlBinPath",codeqlBinPath)+";"
    finalCMD                = (lombokCmd+codeqlCreateCmd+codeqlScanCmd)

elif inputParameter2 == "js" or inputParameter2 == "javascript":
    cmd                     = inputParameter1 # 获取第一个参数
    codeqlOutName           = str(getCurrentTime())+"_"+str(getCodeRespName(cmd))+"_codeql扫描结果.txt"
    cdToRootCmd             = "cd " + str(root_path) + str(getCodeRespName(cmd)) + ";"
    codeqlCreateCmd         = cdToRootCmd  + "codeqlBinPath database create codeqldatabase --language=javascript  --overwrite".replace("codeqlBinPath",codeqlBinPath)+";"
    codeqlScanCmd           = "for file in codeqlJSFilesPath*.ql; do sudo codeqlBinPath query run --database=codeqldatabase \"$file\">>codeqlOutName; done".replace("codeqlOutName",codeqlOutName).replace("codeqlJSFilesPath",codeqlJSFilesPath).replace("codeqlBinPath",codeqlBinPath)+";"
    finalCMD                = (codeqlCreateCmd+codeqlScanCmd)

elif inputParameter2 == "c" or inputParameter2 == "cpp" or inputParameter2 == "c++" :
    cmd                     = inputParameter1 # 获取第一个参数
    codeqlOutName           = str(getCurrentTime())+"_"+str(getCodeRespName(cmd))+"_codeql扫描结果.txt"
    cdToRootCmd             = "cd " + str(root_path) + str(getCodeRespName(cmd)) + ";"
    codeqlCreateCmd         = cdToRootCmd  + "codeqlBinPath database create codeqldatabase --language=cpp  --command='bash /root/code/build.sh'   --overwrite".replace("codeqlBinPath",codeqlBinPath)+";"
    codeqlScanCmd           = "for file in codeqlcppFilesPath*.ql; do sudo codeqlBinPath query run --database=codeqldatabase \"$file\">>codeqlOutName; done".replace("codeqlOutName",codeqlOutName).replace("codeqlcppFilesPath",codeqlcppFilesPath).replace("codeqlBinPath",codeqlBinPath)+";"
    finalCMD                = (codeqlCreateCmd+codeqlScanCmd)
   

msg="++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++运行下面命令：++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\nfinaCMD \n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++运行上面面命令：++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n"

trivyOutPutFilePath         =  str(getCurrentTime())+"_"+str(getCodeRespName(inputParameter1))+"_trivy扫描结果.txt"
trivyCmd                    =  " "+trivyFilesPath + "trivy fs " + projectRootPath + " --offline-scan   -o " + trivyOutPutFilePath + ";"
codeqlDatabasePath          =  root_path + "/" + str(getCurrentTime())+"_"+str(getCodeRespName(inputParameter1))+"_codeqldatabase"
mvCodeqlDatabaseDirCmd1     =  "mv " + projectRootPath + "/codeqldatabase " + codeqlDatabasePath+";"
mvCodeqlDatabaseDirCmd2     =  "mv " + codeqlDatabasePath + " " + root_path + "/" +str(getCodeRespName(inputParameter1)) +"/"+ str(getCurrentTime())+"_"+str(getCodeRespName(inputParameter1))+"_codeqldatabase;"
finalCMD                    =  (gitCloneCmd+finalCMD+mvCodeqlDatabaseDirCmd1 + trivyCmd + replaceFileContenCmd + mvCodeqlDatabaseDirCmd2).replace("javaEnvSetting",javaEnvSetting)
# finalCMD                    =  gitCloneCmd + "sudo bash -c '''" + finalCMD + "'''"
msg                         =  msg.replace("finaCMD",finalCMD)
print(msg)
returned_value = subprocess.call(finalCMD, shell=True) # 返回退出码
print('returned value:', returned_value)